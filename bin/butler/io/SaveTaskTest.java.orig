package butler.io;

import butler.common.Task;
import butler.common.TaskType;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;



public class SaveTaskTest {

	List<Task> taskList1;
	List<Task> taskList2;

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {		
		taskList1 = new ArrayList<Task>();
		taskList2 = new ArrayList<Task>();

		// create a floating task
		Task floatTask = new Task(TaskType.FLOATING, "Floating Task");
		taskList1.add(floatTask);
		taskList2.add(floatTask);

		// create a normal task
		Date start = new Date(1380556800000L);
		Date end = new Date(1380560400000L);
		Task normTask = new Task(TaskType.NORMAL, "Normal Task", start, end);
		taskList2.add(normTask);

		// create a deadline task
		Task deadTask = new Task(TaskType.DEADLINE, "Deadline Task", start, end);
		taskList2.add(deadTask);
	}

	@After
	public void tearDown() throws Exception {
	}

	// Case for 1 task in list
	// Output should be equal to expected output
	@Test
	public void testSingleTask() {
		StorageFacade testStore = new StorageFacade();
		testStore.saveTasks(taskList1);

		try {
			// output from test
			File file = new File("cs2103aug2013f10-2j.txt");
			FileReader fr = new FileReader(file);
			BufferedReader br = new BufferedReader(fr);
			String line;
			StringBuilder sbTest = new StringBuilder();
			while ((line = br.readLine()) != null) {  
				System.out.println(line);
				sbTest.append(line);
			}

			// expected output
			file = new File("test1.txt");
			fr = new FileReader(file);
			br = new BufferedReader(fr);
			StringBuilder sbExpected = new StringBuilder();
			while ((line = br.readLine()) != null) {  
				System.out.println(line);
				sbExpected.append(line);
			}

			boolean result = sbTest.toString().equals(sbExpected.toString());
			br.close();
			fr.close();

			assertTrue(result);
		} catch (Exception e) {
			// nothing
		}
	}

	// Case for multiple tasks
	// Output should be equal to expected output
	@Test
	public void testMultipleTasks() {
		StorageFacade testStore = new StorageFacade();
		testStore.saveTasks(taskList2);

		try {
			// output from test
			File file = new File("cs2103aug2013f10-2j.txt");
			FileReader fr = new FileReader(file);
			BufferedReader br = new BufferedReader(fr);
			String line;
			StringBuilder sbTest = new StringBuilder();
			while ((line = br.readLine()) != null) {  
				System.out.println(line);
				sbTest.append(line);
			}

			// expected output
			file = new File("test2.txt");
			fr = new FileReader(file);
			br = new BufferedReader(fr);
			StringBuilder sbExpected = new StringBuilder();
			while ((line = br.readLine()) != null) {  
				System.out.println(line);
				sbExpected.append(line);
			}

			boolean result = sbTest.toString().equals(sbExpected.toString());
			br.close();
			fr.close();

			assertTrue(result);
		} catch (Exception e) {
			// nothing
		}
	}

}
